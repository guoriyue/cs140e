AssertNow	./libc//demand.h	/^#define AssertNow(x) switch(1) { case (x): case 0:/
CQ_T	./libc//circular-T.h	/^#define CQ_T(pfx) pfx ## _cq_T $/
LINE_STR	./libc//demand.h	/^#define LINE_STR()  LINE_STR_HELPER(__LINE__)$/
LINE_STR_HELPER	./libc//demand.h	/^#define LINE_STR_HELPER(x)  _XSTRING(x)$/
MK_TRAMPOLINE	./staff-src/unhandled-exception.S	/^#define MK_TRAMPOLINE(name, offset, fn)     \\$/
Mrandom	./libc/random.c	/^int main() {$/
Q_T	./libc//queue-T.h	/^#define Q_T(pfx) pfx ## _T$/
STACK_T	./libc//stack-T.h	/^    static inline STACK_T(pfx) pfx ## _mk(void) { /
T	./libc//helper-macros.h	/^\/\/ type pun a uint32 into a type T (hopefully) w/
_XSTRING	./libc//demand.h	/^#define _XSTRING(x) #x$/
_cstart	./staff-src/cstart.c	/^void _cstart() {$/
_u	./libc//helper-macros.h	/^        union _u { _T v; unsigned u; } u = (union /
aligned	./libc//helper-macros.h	/^#define aligned(ptr, n)  ((unsigned)ptr % n == 0)$/
aligned4	./libc//helper-macros.h	/^#define aligned4(ptr)  aligned(ptr,4)$/
aligned8	./libc//lmemcpy.h	/^#define aligned8(ptr)  aligned(ptr,8)$/
asm_bad_exception	./staff-src/unhandled-exception.S	/^  asm_bad_exception(reset)$/
asm_bad_exception_helper	./staff-src/asm-helpers.c	/^void asm_bad_exception_helper(uint32_t pc, const c/
asm_not_implemented_helper	./staff-src/asm-helpers.c	/^void asm_not_implemented_helper(uint32_t pc, const/
asm_not_reached_helper	./staff-src/asm-helpers.c	/^void asm_not_reached_helper(uint32_t pc, const cha/
asm_todo_helper	./staff-src/asm-helpers.c	/^void asm_todo_helper(uint32_t pc, const char *todo/
assert	./libc//demand.h	/^#define assert(bool) do {                         /
at_user_level	./staff-src/reboot.c	/^int at_user_level(void) {$/
bcm_set_interrupts_off	./staff-src/interrupts-c.c	/^void bcm_set_interrupts_off(void) {$/
bit_clr	./libc//bit-support.h	/^bit_clr(uint32_t x, unsigned bit) {$/
bit_count	./libc//bit-support.h	/^bit_count(uint32_t x) {$/
bit_is_off	./libc//bit-support.h	/^bit_is_off(uint32_t x, unsigned bit) {$/
bit_is_on	./libc//bit-support.h	/^bit_is_on(uint32_t x, unsigned bit) {$/
bit_not	./libc//bit-support.h	/^bit_not(uint32_t x, unsigned bit) {$/
bit_set	./libc//bit-support.h	/^bit_set(uint32_t x, unsigned bit) {$/
bits_clr	./libc//bit-support.h	/^bits_clr(uint32_t x, unsigned lb, unsigned ub) {$/
bits_diff	./libc//bit-support.h	/^bits_diff(uint32_t A, uint32_t B) {$/
bits_eq	./libc//bit-support.h	/^bits_eq(uint32_t x, unsigned lb, unsigned ub, uint/
bits_get	./libc//bit-support.h	/^bits_get(uint32_t x, unsigned lb, unsigned ub) {$/
bits_intersect	./libc//bit-support.h	/^bits_intersect(uint32_t x, uint32_t y) {$/
bits_mask	./libc//bit-support.h	/^static inline uint32_t bits_mask(unsigned nbits) {/
bits_not	./libc//bit-support.h	/^static inline uint32_t bits_not(uint32_t x) {$/
bits_set	./libc//bit-support.h	/^bits_set(uint32_t x, unsigned lb, unsigned ub, uin/
bits_union	./libc//bit-support.h	/^bits_union(uint32_t x, uint32_t y) {$/
caches_disable	./staff-src/cache.c	/^void caches_disable(void) {$/
caches_enable	./staff-src/cache.c	/^void caches_enable(void) {$/
caches_is_enabled	./staff-src/cache.c	/^int caches_is_enabled(void) {$/
can	src/gpio.c	/^\/\/ can (and should) use array calculations!$/
check_bitfield	./libc//helper-macros.h	/^#define check_bitfield(T, field, off, nbits) do { /
check_off	./libc//helper-macros.h	/^#define check_off(T, field, off, nbytes) do {     /
check_off_static	./libc//helper-macros.h	/^#define check_off_static(T, field, off, nbytes) do/
chr	./libc/putchar.c	/^typedef int (*rpi_putchar_t)(int chr);$/
clean_reboot	./staff-src/clean-reboot.c	/^void clean_reboot(void) {$/
cq_ckpt	./libc//circular.h	/^static inline unsigned cq_ckpt(cq_t *c) { return c/
cq_empty	./libc//circular.h	/^static inline int cq_empty(cq_t *q) { gcc_mb(); re/
cq_full	./libc//circular.h	/^static inline int cq_full(cq_t *q) { gcc_mb(); ret/
cq_init	./libc//circular.h	/^static inline void cq_init(cq_t *c, unsigned error/
cq_nelem	./libc//circular.h	/^static inline unsigned cq_nelem(cq_t *q) { gcc_mb(/
cq_nspace	./libc//circular.h	/^static inline unsigned cq_nspace(cq_t *q) { return/
cq_ok	./libc//circular.h	/^static inline void cq_ok(cq_t *c) {$/
cq_peek	./libc//circular.h	/^static inline int cq_peek(cq_t *c, cqe_t *e) {$/
cq_peek_n	./libc//circular.h	/^static inline int cq_peek_n(cq_t *c, cqe_t *v, uns/
cq_pop	./libc//circular.h	/^static inline cqe_t cq_pop(cq_t *c) {$/
cq_pop32	./libc//circular.h	/^static inline uint32_t cq_pop32(cq_t *c) {$/
cq_pop32_noblk	./libc//circular.h	/^static inline int cq_pop32_noblk(cq_t *c, uint32_t/
cq_pop_n	./libc//circular.h	/^static inline void cq_pop_n(cq_t *c, void *data, u/
cq_pop_n_noblk	./libc//circular.h	/^static inline int cq_pop_n_noblk(cq_t *q, void *da/
cq_pop_nonblock	./libc//circular.h	/^static inline int cq_pop_nonblock(cq_t *c, cqe_t */
cq_print	./libc//circular.h	/^static inline void cq_print(cq_t *c) {$/
cq_push	./libc//circular.h	/^static inline int cq_push(cq_t *c, cqe_t x) {$/
cq_push32	./libc//circular.h	/^static inline int cq_push32(cq_t *c, uint32_t x) {/
cq_push_n	./libc//circular.h	/^static inline int cq_push_n(cq_t *c, const void *d/
cq_restore	./libc//circular.h	/^static inline void cq_restore(cq_t *c, unsigned ck/
cq_t	./libc//circular.h	/^} cq_t;$/
cqe_t	./libc//circular.h	/^    typedef unsigned char cqe_t;$/
custom_loader	./staff-src/custom-loader.c	/^void custom_loader(void) {$/
data_abort_vector	./staff-src/default-handler-data-abort.c	/^void data_abort_vector(unsigned pc) { INT_UNHANDLE/
debug	./libc//demand.h	/^#define debug(msg, args...) \\$/
default_putchar	./libc/putchar.c	/^static int default_putchar(int c) { $/
delay_cycles	./staff-src/delay-ncycles.c	/^void delay_cycles(uint32_t ticks) {$/
delay_ms	./staff-src/timer.c	/^void delay_ms(uint32_t ms) {$/
delay_sec	./staff-src/timer.c	/^void delay_sec(uint32_t sec) {$/
delay_us	./staff-src/timer.c	/^void delay_us(uint32_t us) {$/
demand	./libc//demand.h	/^#define demand(_expr, _msg, args...) do {         /
emit_val	./libc/printk.c	/^static void emit_val(unsigned base, uint32_t u) {$/
fast_hash	./libc//fast-hash32.h	/^static inline uint32_t fast_hash(const void * data/
fast_hash32	./libc//fast-hash32.h	/^static inline uint32_t fast_hash32(const void * da/
fast_hash_inc32	./libc//fast-hash32.h	/^static inline uint32_t fast_hash_inc32(const void /
fast_interrupt_vector	./staff-src/default-handler-fast.c	/^void fast_interrupt_vector(unsigned pc) { INT_UNHA/
fiq_vector	./staff-src/default-handler-fast.c	/^void fiq_vector(unsigned pc) { INT_UNHANDLED("fast/
gen_circular	./libc//circular-T.h	/^#define gen_circular(pfx, E, N)                   /
gen_list_T	./libc//list-T.h	/^#define gen_list_T(pfx, E_T, next_name)     \\$/
gen_queue_T	./libc//queue-T.h	/^#define gen_queue_T(pfx, E_T, next)               /
get16bits	./libc//fast-hash32.h	/^#define get16bits(d) (*((const uint16_t *) (d)))$/
gpio_read	src/gpio.c	/^int gpio_read(unsigned pin) {$/
gpio_set_function	src/gpio.c	/^void gpio_set_function(unsigned pin, gpio_func_t f/
gpio_set_input	src/gpio.c	/^void gpio_set_input(unsigned pin) {$/
gpio_set_off	src/gpio.c	/^void gpio_set_off(unsigned pin) {$/
gpio_set_on	src/gpio.c	/^void gpio_set_on(unsigned pin) {$/
gpio_write	src/gpio.c	/^void gpio_write(unsigned pin, unsigned v) {$/
initstate_r	./libc/random.c	/^int initstate_r (unsigned int seed, char *arg_stat/
int_init	./staff-src/interrupts-c.c	/^void int_init(void) {$/
int_init_vec	./staff-src/interrupts-c.c	/^void int_init_vec(uint32_t *vec, uint32_t *vec_end/
int_vector	./staff-src/default-handler-int.c	/^void int_vector(unsigned pc) { INT_UNHANDLED("inte/
interrupt_vector	./staff-src/default-handler-interrupt.c	/^void interrupt_vector(unsigned pc) { INT_UNHANDLED/
is_aligned	./libc//helper-macros.h	/^#define is_aligned(x, a)        ((unsigned)(x) % (/
is_aligned4	./libc//pointer-T.h	/^#define is_aligned4(ptr) is_aligned(ptr,4)$/
is_aligned8	./libc//pointer-T.h	/^#define is_aligned8(ptr) is_aligned(ptr,8)$/
is_aligned_ptr	./libc//helper-macros.h	/^#define is_aligned_ptr(x, a)        is_aligned((ui/
llmemcpy	./libc//lmemcpy.h	/^llmemcpy(void *dst, void *src, size_t nbytes) {$/
lmemcpy	./libc//lmemcpy.h	/^lmemcpy(void *dst, void *src, size_t nbytes) {$/
lmemset	./libc//lmemcpy.h	/^lmemset(void *dst, uint32_t v, size_t nbytes) {$/
memcmp	./libc/memcmp.c	/^int memcmp(const void *_s1, const void *_s2, size_/
memcpy	./libc/memcpy.c	/^void *memcpy(void *dst, const void *src, size_t nb/
memiszero	./libc/memiszero.c	/^int memiszero(const void *_p, unsigned n) {$/
memmove	./libc/memmove.c	/^void *memmove(void *dst, const void *src, size_t c/
memset	./libc/memset.c	/^void *memset(void *dst, int c, size_t n) {$/
not_reached	./libc//demand.h	/^#define not_reached()   panic("NOTREACHED!\\n");$/
notmain	./libc/printk.c	/^void notmain(void) {$/
our_crc32	./libc/crc.c	/^uint32_t our_crc32(const void *buf, unsigned size)/
our_crc32_inc	./libc/crc.c	/^uint32_t our_crc32_inc(const void *buf, unsigned s/
panic	./libc//demand.h	/^#define panic(msg, args...) do { 					    \\$/
pi_random	./libc/pi-random.c	/^uint32_t pi_random(void) {$/
pi_random_init	./libc/pi-random.c	/^uint32_t pi_random_init(void) {$/
pi_random_seed	./libc/pi-random.c	/^void pi_random_seed(uint32_t x) {$/
pi_roundup	./libc//helper-macros.h	/^#define pi_roundup(x,n) (((x)+((n)-1))&(~((n)-1)))/
prefetch_abort_vector	./staff-src/default-handler-prefetch.c	/^void prefetch_abort_vector(unsigned pc) { INT_UNHA/
prefetch_flush	staff-start.S	/^    prefetch_flush(r1)$/
pretty_print_usec	./libc//pretty-time.h	/^pretty_print_usec(uint32_t start_usec) {$/
pretty_time_mk	./libc//pretty-time.h	/^pretty_time_mk(uint32_t start_usec) {$/
pretty_time_print	./libc//pretty-time.h	/^pretty_time_print(pretty_time_t t) {$/
pretty_time_t	./libc//pretty-time.h	/^} pretty_time_t;$/
print_field	./libc//helper-macros.h	/^#define print_field(x, field) do {                /
print_random	./libc/random.c	/^static void print_random(struct random_data *r, un/
printk	./libc/printk.c	/^int printk(const char *fmt, ...) {$/
putk	./libc/putk.c	/^int putk(const char *p) {$/
random_data	./libc//random.h	/^struct random_data$/
random_r	./libc/random.c	/^int random_r(struct random_data *buf, int32_t *res/
reboot_callout	./staff-src/default-reboot-callout.c	/^void reboot_callout(void) {} $/
reboot_handler	./staff-src/default-reboot-handler.c	/^void reboot_handler(void) { } $/
reset_vector	./staff-src/default-handler-reset.c	/^void reset_vector(unsigned pc) { INT_UNHANDLED("re/
rpi_putchar	./libc/putchar.c	/^int rpi_putchar(int c) { $/
rpi_putchar_set	./libc/putchar.c	/^rpi_putchar_t rpi_putchar_set(rpi_putchar_t putc) /
rpi_wait	./staff-src/rpi-wait.c	/^void rpi_wait(void) { }$/
set_all_interrupts_off	./staff-src/interrupts-c.c	/^uint32_t set_all_interrupts_off(void) {$/
set_user_level	./staff-src/reboot.c	/^void set_user_level(void) {$/
setstate_r	./libc/random.c	/^int setstate_r (char *arg_state, struct random_dat/
software_interrupt_vector	./staff-src/default-handler-int.c	/^\/\/void software_interrupt_vector(unsigned pc) { /
srandom_r	./libc/random.c	/^int srandom_r (unsigned int seed, struct random_da/
strcat	./libc/strcat.c	/^char *strcat (char *dest, const char *src) {$/
strchr	./libc/strchr.c	/^char *strchr(register const char *s, int c) {$/
strcmp	./libc/strcmp.c	/^int strcmp(const char *a, const char *b) {$/
strcpy	./libc/strcpy.c	/^char *strcpy(char * s1, const char * s2) {$/
strlen	./libc/strlen.c	/^size_t strlen(const char *p) {$/
strncmp	./libc/strncmp.c	/^int strncmp(const char* _s1, const char* _s2, size/
syscall_vector	./staff-src/default-handler-swi.c	/^void syscall_vector(unsigned pc) { INT_UNHANDLED("/
test_passed	./libc//demand.h	/^#define test_passed(args...)  \\$/
time_print	./libc//time-print.h	/^static void time_print(const char *msg, uint32_t s/
time_to_msec	./libc//time-print.h	/^static inline unsigned time_to_msec(unsigned tot) /
time_to_sec	./libc//time-print.h	/^static inline unsigned time_to_sec(unsigned tot) {/
time_to_usec	./libc//time-print.h	/^static inline unsigned time_to_usec(unsigned tot) /
timer_check_offsets	./staff-src/timer-interrupt.c	/^static void timer_check_offsets(void) {$/
timer_get_usec	./staff-src/timer.c	/^uint32_t timer_get_usec(void) {$/
timer_get_usec_raw	./staff-src/timer.c	/^uint32_t timer_get_usec_raw(void) {$/
timer_interrupt_init	./staff-src/timer-interrupt.c	/^void timer_interrupt_init(unsigned ncycles) {$/
todo	./libc//demand.h	/^#define todo(msg...) panic("TODO:" msg)$/
trace	./libc//demand.h	/^#define trace(args...) \\$/
trace_clean_exit	./libc//demand.h	/^#define trace_clean_exit(args...) \\$/
trace_notreached	./libc//demand.h	/^#define trace_notreached() \\$/
trace_panic	./libc//demand.h	/^#define trace_panic(args...) do { \\$/
uart_hex	./libc/uart-hex.c	/^int uart_hex(unsigned h) {$/
uint32	./libc//helper-macros.h	/^\/\/ type pun a type T into a uint32 (hopefully) w/
undefined_instruction_vector	./staff-src/default-handler-undefined-inst.c	/^void undefined_instruction_vector(unsigned pc) { I/
unimplemented	./libc//demand.h	/^#define unimplemented() panic("implement this func/
usec_to_msec	./libc//pretty-time.h	/^static inline uint32_t usec_to_msec(uint32_t tot_u/
usec_to_sec	./libc//pretty-time.h	/^static inline uint32_t usec_to_sec(uint32_t tot_us/
usec_to_usec	./libc//pretty-time.h	/^static inline uint32_t usec_to_usec(uint32_t tot_u/
vprintk	./libc/printk.c	/^int vprintk(const char *fmt, va_list ap) {$/
watchdog_feed	./staff-src/watchdog.c	/^void watchdog_feed(void) {$/
watchdog_get_time_left_ms	./staff-src/watchdog.c	/^unsigned watchdog_get_time_left_ms(void) {$/
watchdog_get_time_left_sec	./staff-src/watchdog.c	/^unsigned watchdog_get_time_left_sec(void) {$/
watchdog_get_time_left_ticks	./staff-src/watchdog.c	/^unsigned watchdog_get_time_left_ticks(void) {$/
watchdog_get_time_left_us	./staff-src/watchdog.c	/^unsigned watchdog_get_time_left_us(void) {$/
watchdog_is_running	./staff-src/watchdog.c	/^int watchdog_is_running(void) {$/
watchdog_reboot	./staff-src/watchdog.c	/^void watchdog_reboot(void) {$/
watchdog_resume	./staff-src/watchdog.c	/^void watchdog_resume(void) {$/
watchdog_shutdown	./staff-src/watchdog.c	/^void watchdog_shutdown(void) {$/
watchdog_start_ms	./staff-src/watchdog.c	/^void watchdog_start_ms(unsigned ms) {$/
watchdog_start_sec	./staff-src/watchdog.c	/^void watchdog_start_sec(unsigned sec) {$/
watchdog_start_ticks	./staff-src/watchdog.c	/^void watchdog_start_ticks(unsigned ticks) {$/
watchdog_start_us	./staff-src/watchdog.c	/^void watchdog_start_us(unsigned us) {$/
watchdog_stop	./staff-src/watchdog.c	/^void watchdog_stop(void) {$/
zero	./libc//helper-macros.h	/^#define zero(x) memset(x, 0, sizeof *x)$/
