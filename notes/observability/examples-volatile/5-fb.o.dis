
5-fb.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_mailbox_x>:
#define MAILBOX_EMPTY  (1<<30)
#define MAILBOX_FULL   (1<<31)

static fb_config_t cp;

void write_mailbox_x(volatile mailbox_t *mbox, unsigned channel) {
   0:	e92d0030 	push	{r4, r5}
    while(mbox->status & MAILBOX_FULL)
   4:	e5903018 	ldr	r3, [r0, #24]
   8:	e3530000 	cmp	r3, #0, 0
   c:	bafffffc 	blt	4 <write_mailbox_x+0x4>
    // interesting, if you flip around these assignments
    // controls if the write assigment gets hoisted
    cp.height = cp.virtual_height = 960;
    cp.x_offset = cp.y_offset = 0;
    cp.depth = 32;
    cp.width = cp.virtual_width = 1280;
  10:	e3a04c05 	mov	r4, #1280	; 0x500
  14:	e3a05d0f 	mov	r5, #960	; 0x3c0
    cp.x_offset = cp.y_offset = 0;
  18:	e3a02000 	mov	r2, #0, 0
    cp.depth = 32;
  1c:	e3a0c020 	mov	ip, #32, 0
    cp.x_offset = cp.y_offset = 0;
  20:	e59f302c 	ldr	r3, [pc, #44]	; 54 <write_mailbox_x+0x54>
    cp.pointer = 0;
    mbox->write = ((unsigned)(&cp) | channel | 0x40000000);
  24:	e1831001 	orr	r1, r3, r1
  28:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
    cp.width = cp.virtual_width = 1280;
  2c:	e8830030 	stm	r3, {r4, r5}
  30:	e5834008 	str	r4, [r3, #8]
  34:	e583500c 	str	r5, [r3, #12]
    cp.pointer = 0;
  38:	e5832020 	str	r2, [r3, #32]
    cp.x_offset = cp.y_offset = 0;
  3c:	e583201c 	str	r2, [r3, #28]
    mbox->write = ((unsigned)(&cp) | channel | 0x40000000);
  40:	e5801020 	str	r1, [r0, #32]
    cp.x_offset = cp.y_offset = 0;
  44:	e5832018 	str	r2, [r3, #24]
    cp.depth = 32;
  48:	e583c014 	str	ip, [r3, #20]
}
  4c:	e8bd0030 	pop	{r4, r5}
  50:	e12fff1e 	bx	lr
  54:	00000000 	.word	0x00000000
